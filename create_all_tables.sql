-- ==============================================
-- Pinger Demo - Complete Database Schema
-- ==============================================
-- This script creates all necessary tables, views, functions, triggers, and policies
-- for the Pinger Demo application in Supabase
-- Run this script in your Supabase SQL editor

-- ==============================================
-- 1. CREATE TABLES
-- ==============================================

-- Companies table
CREATE TABLE "public"."companies" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "name" text not null,
    "sector" text,
    "size" smallint,
    "linkedin_url" text,
    "website" text,
    "phone_number" text,
    "address" text,
    "zipcode" text,
    "city" text,
    "stateAbbr" text,
    "sales_id" bigint,
    "context_links" json,
    "country" text,
    "description" text,
    "revenue" text,
    "tax_identifier" text,
    "logo" jsonb
);

-- Contact Notes table
CREATE TABLE "public"."contactNotes" (
    "id" bigint generated by default as identity not null,
    "contact_id" bigint not null,
    "text" text,
    "date" timestamp with time zone default now(),
    "sales_id" bigint,
    "status" text,
    "attachments" jsonb[]
);

-- Contacts table (with updated schema for email_jsonb and phone_jsonb)
CREATE TABLE "public"."contacts" (
    "id" bigint generated by default as identity not null,
    "first_name" text,
    "last_name" text,
    "gender" text,
    "title" text,
    "email_jsonb" jsonb,
    "phone_jsonb" jsonb,
    "background" text,
    "acquisition" text,
    "avatar" jsonb,
    "first_seen" timestamp with time zone,
    "last_seen" timestamp with time zone,
    "has_newsletter" boolean,
    "status" text,
    "tags" bigint[],
    "company_id" bigint,
    "sales_id" bigint,
    "linkedin_url" text
);

-- Deal Notes table
CREATE TABLE "public"."dealNotes" (
    "id" bigint generated by default as identity not null,
    "deal_id" bigint not null,
    "type" text,
    "text" text,
    "date" timestamp with time zone default now(),
    "sales_id" bigint,
    "attachments" jsonb[]
);

-- Deals table
CREATE TABLE "public"."deals" (
    "id" bigint generated by default as identity not null,
    "name" text not null,
    "company_id" bigint,
    "contact_ids" bigint[],
    "category" text,
    "stage" text not null,
    "description" text,
    "amount" bigint,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now(),
    "archived_at" timestamp with time zone default null,
    "expected_closing_date" timestamp with time zone default null,
    "sales_id" bigint,
    "index" smallint
);

-- Deal Interactions table
CREATE TABLE "public"."dealInteractions" (
    "id" bigint generated by default as identity not null,
    "deal_id" bigint not null,
    "sales_id" bigint,
    "type" text not null,
    "date" timestamp with time zone not null default now(),
    "duration" integer,
    "participant_ids" bigint[],
    "notes" text,
    "attachments" jsonb[],
    "sentiment" text
);

-- Reminders table
CREATE TABLE "public"."reminders" (
    "id" bigint generated by default as identity not null,
    "sales_id" bigint not null,
    "created_at" timestamp with time zone not null default now(),
    "entity_type" text not null,
    "entity_id" bigint not null,
    "trigger_type" text not null,
    "trigger_date" timestamp with time zone not null,
    "action_text" text not null,
    "description" text,
    "priority" text not null default 'medium',
    "status" text not null default 'pending',
    "notify_user_ids" bigint[]
);

-- Sales table (users)
CREATE TABLE "public"."sales" (
    "id" bigint generated by default as identity not null,
    "first_name" text not null,
    "last_name" text not null,
    "email" text not null,
    "administrator" boolean not null,
    "user_id" uuid not null,
    "avatar" jsonb,
    "disabled" boolean not null default FALSE
);

-- Tags table
CREATE TABLE "public"."tags" (
    "id" bigint generated by default as identity not null,
    "name" text not null,
    "color" text not null
);

-- Tasks table
CREATE TABLE "public"."tasks" (
    "id" bigint generated by default as identity not null,
    "contact_id" bigint not null,
    "type" text,
    "text" text,
    "due_date" timestamp with time zone not null,
    "done_date" timestamp with time zone,
    "sales_id" bigint
);

-- ==============================================
-- 2. ENABLE ROW LEVEL SECURITY
-- ==============================================

ALTER TABLE "public"."companies" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."contactNotes" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."contacts" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."dealNotes" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."deals" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."dealInteractions" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."reminders" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."sales" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."tags" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."tasks" ENABLE ROW LEVEL SECURITY;

-- ==============================================
-- 3. CREATE PRIMARY KEYS
-- ==============================================

CREATE UNIQUE INDEX companies_pkey ON public.companies USING btree (id);
CREATE UNIQUE INDEX "contactNotes_pkey" ON public."contactNotes" USING btree (id);
CREATE UNIQUE INDEX contacts_pkey ON public.contacts USING btree (id);
CREATE UNIQUE INDEX "dealNotes_pkey" ON public."dealNotes" USING btree (id);
CREATE UNIQUE INDEX deals_pkey ON public.deals USING btree (id);
CREATE UNIQUE INDEX "dealInteractions_pkey" ON public."dealInteractions" USING btree (id);
CREATE UNIQUE INDEX "reminders_pkey" ON public."reminders" USING btree (id);
CREATE UNIQUE INDEX sales_pkey ON public.sales USING btree (id);
CREATE UNIQUE INDEX tags_pkey ON public.tags USING btree (id);
CREATE UNIQUE INDEX tasks_pkey ON public.tasks USING btree (id);

ALTER TABLE "public"."companies" ADD CONSTRAINT "companies_pkey" PRIMARY KEY USING INDEX "companies_pkey";
ALTER TABLE "public"."contactNotes" ADD CONSTRAINT "contactNotes_pkey" PRIMARY KEY USING INDEX "contactNotes_pkey";
ALTER TABLE "public"."contacts" ADD CONSTRAINT "contacts_pkey" PRIMARY KEY USING INDEX "contacts_pkey";
ALTER TABLE "public"."dealNotes" ADD CONSTRAINT "dealNotes_pkey" PRIMARY KEY USING INDEX "dealNotes_pkey";
ALTER TABLE "public"."deals" ADD CONSTRAINT "deals_pkey" PRIMARY KEY USING INDEX "deals_pkey";
ALTER TABLE "public"."dealInteractions" ADD CONSTRAINT "dealInteractions_pkey" PRIMARY KEY USING INDEX "dealInteractions_pkey";
ALTER TABLE "public"."reminders" ADD CONSTRAINT "reminders_pkey" PRIMARY KEY USING INDEX "reminders_pkey";
ALTER TABLE "public"."sales" ADD CONSTRAINT "sales_pkey" PRIMARY KEY USING INDEX "sales_pkey";
ALTER TABLE "public"."tags" ADD CONSTRAINT "tags_pkey" PRIMARY KEY USING INDEX "tags_pkey";
ALTER TABLE "public"."tasks" ADD CONSTRAINT "tasks_pkey" PRIMARY KEY USING INDEX "tasks_pkey";

-- ==============================================
-- 4. CREATE ADDITIONAL INDEXES
-- ==============================================

-- Unique index for sales user_id
CREATE UNIQUE INDEX "uq__sales__user_id" ON public.sales (user_id);

-- Indexes for reminders table for efficient queries
CREATE INDEX "reminders_trigger_date_idx" ON public."reminders" USING btree (trigger_date);
CREATE INDEX "reminders_status_idx" ON public."reminders" USING btree (status);

-- ==============================================
-- 5. CREATE FOREIGN KEY CONSTRAINTS
-- ==============================================

-- Companies foreign keys
ALTER TABLE "public"."companies" ADD CONSTRAINT "companies_sales_id_fkey" FOREIGN KEY (sales_id) REFERENCES sales(id) NOT VALID;
ALTER TABLE "public"."companies" VALIDATE CONSTRAINT "companies_sales_id_fkey";

-- ContactNotes foreign keys
ALTER TABLE "public"."contactNotes" ADD CONSTRAINT "contactNotes_contact_id_fkey" FOREIGN KEY (contact_id) REFERENCES contacts(id) ON UPDATE CASCADE ON DELETE CASCADE NOT VALID;
ALTER TABLE "public"."contactNotes" VALIDATE CONSTRAINT "contactNotes_contact_id_fkey";
ALTER TABLE "public"."contactNotes" ADD CONSTRAINT "contactNotes_sales_id_fkey" FOREIGN KEY (sales_id) REFERENCES sales(id) ON UPDATE CASCADE ON DELETE CASCADE NOT VALID;
ALTER TABLE "public"."contactNotes" VALIDATE CONSTRAINT "contactNotes_sales_id_fkey";

-- Contacts foreign keys
ALTER TABLE "public"."contacts" ADD CONSTRAINT "contacts_company_id_fkey" FOREIGN KEY (company_id) REFERENCES companies(id) ON UPDATE CASCADE ON DELETE CASCADE NOT VALID;
ALTER TABLE "public"."contacts" VALIDATE CONSTRAINT "contacts_company_id_fkey";
ALTER TABLE "public"."contacts" ADD CONSTRAINT "contacts_sales_id_fkey" FOREIGN KEY (sales_id) REFERENCES sales(id) NOT VALID;
ALTER TABLE "public"."contacts" VALIDATE CONSTRAINT "contacts_sales_id_fkey";

-- DealNotes foreign keys
ALTER TABLE "public"."dealNotes" ADD CONSTRAINT "dealNotes_deal_id_fkey" FOREIGN KEY (deal_id) REFERENCES deals(id) ON UPDATE CASCADE ON DELETE CASCADE NOT VALID;
ALTER TABLE "public"."dealNotes" VALIDATE CONSTRAINT "dealNotes_deal_id_fkey";
ALTER TABLE "public"."dealNotes" ADD CONSTRAINT "dealNotes_sales_id_fkey" FOREIGN KEY (sales_id) REFERENCES sales(id) NOT VALID;
ALTER TABLE "public"."dealNotes" VALIDATE CONSTRAINT "dealNotes_sales_id_fkey";

-- Deals foreign keys
ALTER TABLE "public"."deals" ADD CONSTRAINT "deals_company_id_fkey" FOREIGN KEY (company_id) REFERENCES companies(id) ON UPDATE CASCADE ON DELETE CASCADE NOT VALID;
ALTER TABLE "public"."deals" VALIDATE CONSTRAINT "deals_company_id_fkey";
ALTER TABLE "public"."deals" ADD CONSTRAINT "deals_sales_id_fkey" FOREIGN KEY (sales_id) REFERENCES sales(id) NOT VALID;
ALTER TABLE "public"."deals" VALIDATE CONSTRAINT "deals_sales_id_fkey";

-- DealInteractions foreign keys
ALTER TABLE "public"."dealInteractions" ADD CONSTRAINT "dealInteractions_deal_id_fkey" FOREIGN KEY (deal_id) REFERENCES deals(id) ON UPDATE CASCADE ON DELETE CASCADE NOT VALID;
ALTER TABLE "public"."dealInteractions" VALIDATE CONSTRAINT "dealInteractions_deal_id_fkey";
ALTER TABLE "public"."dealInteractions" ADD CONSTRAINT "dealInteractions_sales_id_fkey" FOREIGN KEY (sales_id) REFERENCES sales(id) NOT VALID;
ALTER TABLE "public"."dealInteractions" VALIDATE CONSTRAINT "dealInteractions_sales_id_fkey";

-- Reminders foreign keys
ALTER TABLE "public"."reminders" ADD CONSTRAINT "reminders_sales_id_fkey" FOREIGN KEY (sales_id) REFERENCES sales(id) NOT VALID;
ALTER TABLE "public"."reminders" VALIDATE CONSTRAINT "reminders_sales_id_fkey";

-- Sales foreign keys
ALTER TABLE "public"."sales" ADD CONSTRAINT "sales_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) NOT VALID;
ALTER TABLE "public"."sales" VALIDATE CONSTRAINT "sales_user_id_fkey";

-- Tasks foreign keys
ALTER TABLE "public"."tasks" ADD CONSTRAINT "tasks_contact_id_fkey" FOREIGN KEY (contact_id) REFERENCES contacts(id) ON UPDATE CASCADE ON DELETE CASCADE NOT VALID;
ALTER TABLE "public"."tasks" VALIDATE CONSTRAINT "tasks_contact_id_fkey";
ALTER TABLE "public"."tasks" ADD CONSTRAINT "tasks_sales_id_fkey" FOREIGN KEY (sales_id) REFERENCES sales(id) NOT VALID;
ALTER TABLE "public"."tasks" VALIDATE CONSTRAINT "tasks_sales_id_fkey";

-- ==============================================
-- 6. GRANT PERMISSIONS
-- ==============================================

SET check_function_bodies = OFF;

-- Grant permissions for companies
GRANT DELETE ON TABLE "public"."companies" TO "authenticated";
GRANT INSERT ON TABLE "public"."companies" TO "authenticated";
GRANT SELECT ON TABLE "public"."companies" TO "authenticated";
GRANT UPDATE ON TABLE "public"."companies" TO "authenticated";

GRANT DELETE ON TABLE "public"."companies" TO "service_role";
GRANT INSERT ON TABLE "public"."companies" TO "service_role";
GRANT REFERENCES ON TABLE "public"."companies" TO "service_role";
GRANT SELECT ON TABLE "public"."companies" TO "service_role";
GRANT TRIGGER ON TABLE "public"."companies" TO "service_role";
GRANT TRUNCATE ON TABLE "public"."companies" TO "service_role";
GRANT UPDATE ON TABLE "public"."companies" TO "service_role";

-- Grant permissions for contactNotes
GRANT DELETE ON TABLE "public"."contactNotes" TO "authenticated";
GRANT INSERT ON TABLE "public"."contactNotes" TO "authenticated";
GRANT SELECT ON TABLE "public"."contactNotes" TO "authenticated";
GRANT UPDATE ON TABLE "public"."contactNotes" TO "authenticated";

GRANT DELETE ON TABLE "public"."contactNotes" TO "service_role";
GRANT INSERT ON TABLE "public"."contactNotes" TO "service_role";
GRANT REFERENCES ON TABLE "public"."contactNotes" TO "service_role";
GRANT SELECT ON TABLE "public"."contactNotes" TO "service_role";
GRANT TRIGGER ON TABLE "public"."contactNotes" TO "service_role";
GRANT TRUNCATE ON TABLE "public"."contactNotes" TO "service_role";
GRANT UPDATE ON TABLE "public"."contactNotes" TO "service_role";

-- Grant permissions for contacts
GRANT DELETE ON TABLE "public"."contacts" TO "authenticated";
GRANT INSERT ON TABLE "public"."contacts" TO "authenticated";
GRANT SELECT ON TABLE "public"."contacts" TO "authenticated";
GRANT UPDATE ON TABLE "public"."contacts" TO "authenticated";

GRANT DELETE ON TABLE "public"."contacts" TO "service_role";
GRANT INSERT ON TABLE "public"."contacts" TO "service_role";
GRANT REFERENCES ON TABLE "public"."contacts" TO "service_role";
GRANT SELECT ON TABLE "public"."contacts" TO "service_role";
GRANT TRIGGER ON TABLE "public"."contacts" TO "service_role";
GRANT TRUNCATE ON TABLE "public"."contacts" TO "service_role";
GRANT UPDATE ON TABLE "public"."contacts" TO "service_role";

-- Grant permissions for dealNotes
GRANT DELETE ON TABLE "public"."dealNotes" TO "authenticated";
GRANT INSERT ON TABLE "public"."dealNotes" TO "authenticated";
GRANT SELECT ON TABLE "public"."dealNotes" TO "authenticated";
GRANT UPDATE ON TABLE "public"."dealNotes" TO "authenticated";

GRANT DELETE ON TABLE "public"."dealNotes" TO "service_role";
GRANT INSERT ON TABLE "public"."dealNotes" TO "service_role";
GRANT REFERENCES ON TABLE "public"."dealNotes" TO "service_role";
GRANT SELECT ON TABLE "public"."dealNotes" TO "service_role";
GRANT TRIGGER ON TABLE "public"."dealNotes" TO "service_role";
GRANT TRUNCATE ON TABLE "public"."dealNotes" TO "service_role";
GRANT UPDATE ON TABLE "public"."dealNotes" TO "service_role";

-- Grant permissions for deals
GRANT DELETE ON TABLE "public"."deals" TO "authenticated";
GRANT INSERT ON TABLE "public"."deals" TO "authenticated";
GRANT SELECT ON TABLE "public"."deals" TO "authenticated";
GRANT UPDATE ON TABLE "public"."deals" TO "authenticated";

GRANT DELETE ON TABLE "public"."deals" TO "service_role";
GRANT INSERT ON TABLE "public"."deals" TO "service_role";
GRANT REFERENCES ON TABLE "public"."deals" TO "service_role";
GRANT SELECT ON TABLE "public"."deals" TO "service_role";
GRANT TRIGGER ON TABLE "public"."deals" TO "service_role";
GRANT TRUNCATE ON TABLE "public"."deals" TO "service_role";
GRANT UPDATE ON TABLE "public"."deals" TO "service_role";

-- Grant permissions for dealInteractions
GRANT DELETE ON TABLE "public"."dealInteractions" TO "authenticated";
GRANT INSERT ON TABLE "public"."dealInteractions" TO "authenticated";
GRANT SELECT ON TABLE "public"."dealInteractions" TO "authenticated";
GRANT UPDATE ON TABLE "public"."dealInteractions" TO "authenticated";

GRANT DELETE ON TABLE "public"."dealInteractions" TO "service_role";
GRANT INSERT ON TABLE "public"."dealInteractions" TO "service_role";
GRANT REFERENCES ON TABLE "public"."dealInteractions" TO "service_role";
GRANT SELECT ON TABLE "public"."dealInteractions" TO "service_role";
GRANT TRIGGER ON TABLE "public"."dealInteractions" TO "service_role";
GRANT TRUNCATE ON TABLE "public"."dealInteractions" TO "service_role";
GRANT UPDATE ON TABLE "public"."dealInteractions" TO "service_role";

-- Grant permissions for reminders
GRANT DELETE ON TABLE "public"."reminders" TO "authenticated";
GRANT INSERT ON TABLE "public"."reminders" TO "authenticated";
GRANT SELECT ON TABLE "public"."reminders" TO "authenticated";
GRANT UPDATE ON TABLE "public"."reminders" TO "authenticated";

GRANT DELETE ON TABLE "public"."reminders" TO "service_role";
GRANT INSERT ON TABLE "public"."reminders" TO "service_role";
GRANT REFERENCES ON TABLE "public"."reminders" TO "service_role";
GRANT SELECT ON TABLE "public"."reminders" TO "service_role";
GRANT TRIGGER ON TABLE "public"."reminders" TO "service_role";
GRANT TRUNCATE ON TABLE "public"."reminders" TO "service_role";
GRANT UPDATE ON TABLE "public"."reminders" TO "service_role";

-- Grant permissions for sales
GRANT DELETE ON TABLE "public"."sales" TO "authenticated";
GRANT INSERT ON TABLE "public"."sales" TO "authenticated";
GRANT SELECT ON TABLE "public"."sales" TO "authenticated";
GRANT UPDATE ON TABLE "public"."sales" TO "authenticated";

GRANT DELETE ON TABLE "public"."sales" TO "service_role";
GRANT INSERT ON TABLE "public"."sales" TO "service_role";
GRANT REFERENCES ON TABLE "public"."sales" TO "service_role";
GRANT SELECT ON TABLE "public"."sales" TO "service_role";
GRANT TRIGGER ON TABLE "public"."sales" TO "service_role";
GRANT TRUNCATE ON TABLE "public"."sales" TO "service_role";
GRANT UPDATE ON TABLE "public"."sales" TO "service_role";

-- Grant permissions for tags
GRANT DELETE ON TABLE "public"."tags" TO "authenticated";
GRANT INSERT ON TABLE "public"."tags" TO "authenticated";
GRANT SELECT ON TABLE "public"."tags" TO "authenticated";
GRANT UPDATE ON TABLE "public"."tags" TO "authenticated";

GRANT DELETE ON TABLE "public"."tags" TO "service_role";
GRANT INSERT ON TABLE "public"."tags" TO "service_role";
GRANT REFERENCES ON TABLE "public"."tags" TO "service_role";
GRANT SELECT ON TABLE "public"."tags" TO "service_role";
GRANT TRIGGER ON TABLE "public"."tags" TO "service_role";
GRANT TRUNCATE ON TABLE "public"."tags" TO "service_role";
GRANT UPDATE ON TABLE "public"."tags" TO "service_role";

-- Grant permissions for tasks
GRANT DELETE ON TABLE "public"."tasks" TO "authenticated";
GRANT INSERT ON TABLE "public"."tasks" TO "authenticated";
GRANT SELECT ON TABLE "public"."tasks" TO "authenticated";
GRANT UPDATE ON TABLE "public"."tasks" TO "authenticated";

GRANT DELETE ON TABLE "public"."tasks" TO "service_role";
GRANT INSERT ON TABLE "public"."tasks" TO "service_role";
GRANT REFERENCES ON TABLE "public"."tasks" TO "service_role";
GRANT SELECT ON TABLE "public"."tasks" TO "service_role";
GRANT TRIGGER ON TABLE "public"."tasks" TO "service_role";
GRANT TRUNCATE ON TABLE "public"."tasks" TO "service_role";
GRANT UPDATE ON TABLE "public"."tasks" TO "service_role";

-- ==============================================
-- 7. CREATE ROW LEVEL SECURITY POLICIES
-- ==============================================

-- Companies policies
CREATE POLICY "Enable insert for authenticated users only"
ON "public"."companies"
AS PERMISSIVE
FOR INSERT
TO authenticated
WITH CHECK (true);

CREATE POLICY "Enable read access for authenticated users"
ON "public"."companies"
AS PERMISSIVE
FOR SELECT
TO authenticated
USING (true);

CREATE POLICY "Enable update for authenticated users only"
ON "public"."companies"
AS PERMISSIVE
FOR UPDATE
TO authenticated
USING (true)
WITH CHECK (true);

CREATE POLICY "Company Delete Policy"
ON "public"."companies"
AS PERMISSIVE
FOR DELETE
TO authenticated
USING (true);

-- ContactNotes policies
CREATE POLICY "Enable insert for authenticated users only"
ON "public"."contactNotes"
AS PERMISSIVE
FOR INSERT
TO authenticated
WITH CHECK (true);

CREATE POLICY "Enable read access for authenticated users"
ON "public"."contactNotes"
AS PERMISSIVE
FOR SELECT
TO authenticated
USING (true);

CREATE POLICY "Contact Notes Update policy"
ON "public"."contactNotes"
AS PERMISSIVE
FOR UPDATE
TO authenticated
USING (true);

CREATE POLICY "Contact Notes Delete Policy"
ON "public"."contactNotes"
AS PERMISSIVE
FOR DELETE
TO authenticated
USING (true);

-- Contacts policies
CREATE POLICY "Enable insert for authenticated users only"
ON "public"."contacts"
AS PERMISSIVE
FOR INSERT
TO authenticated
WITH CHECK (true);

CREATE POLICY "Enable read access for authenticated users"
ON "public"."contacts"
AS PERMISSIVE
FOR SELECT
TO authenticated
USING (true);

CREATE POLICY "Enable update for authenticated users only"
ON "public"."contacts"
AS PERMISSIVE
FOR UPDATE
TO authenticated
USING (true)
WITH CHECK (true);

CREATE POLICY "Contact Delete Policy"
ON "public"."contacts"
AS PERMISSIVE
FOR DELETE
TO authenticated
USING (true);

-- DealNotes policies
CREATE POLICY "Enable insert for authenticated users only"
ON "public"."dealNotes"
AS PERMISSIVE
FOR INSERT
TO authenticated
WITH CHECK (true);

CREATE POLICY "Enable read access for authenticated users"
ON "public"."dealNotes"
AS PERMISSIVE
FOR SELECT
TO authenticated
USING (true);

CREATE POLICY "Deal Notes Update Policy"
ON "public"."dealNotes"
AS PERMISSIVE
FOR UPDATE
TO authenticated
USING (true);

CREATE POLICY "Deal Notes Delete Policy"
ON "public"."dealNotes"
AS PERMISSIVE
FOR DELETE
TO authenticated
USING (true);

-- Deals policies
CREATE POLICY "Enable insert for authenticated users only"
ON "public"."deals"
AS PERMISSIVE
FOR INSERT
TO authenticated
WITH CHECK (true);

CREATE POLICY "Enable read access for authenticated users"
ON "public"."deals"
AS PERMISSIVE
FOR SELECT
TO authenticated
USING (true);

CREATE POLICY "Enable update for authenticated users only"
ON "public"."deals"
AS PERMISSIVE
FOR UPDATE
TO authenticated
USING (true)
WITH CHECK (true);

CREATE POLICY "Deals Delete Policy"
ON "public"."deals"
AS PERMISSIVE
FOR DELETE
TO authenticated
USING (true);

-- DealInteractions policies
CREATE POLICY "Enable insert for authenticated users only"
ON "public"."dealInteractions"
AS PERMISSIVE
FOR INSERT
TO authenticated
WITH CHECK (true);

CREATE POLICY "Enable read access for authenticated users"
ON "public"."dealInteractions"
AS PERMISSIVE
FOR SELECT
TO authenticated
USING (true);

CREATE POLICY "Deal Interactions Update Policy"
ON "public"."dealInteractions"
AS PERMISSIVE
FOR UPDATE
TO authenticated
USING (true);

CREATE POLICY "Deal Interactions Delete Policy"
ON "public"."dealInteractions"
AS PERMISSIVE
FOR DELETE
TO authenticated
USING (true);

-- Reminders policies
CREATE POLICY "Enable insert for authenticated users only"
ON "public"."reminders"
AS PERMISSIVE
FOR INSERT
TO authenticated
WITH CHECK (true);

CREATE POLICY "Enable read access for authenticated users"
ON "public"."reminders"
AS PERMISSIVE
FOR SELECT
TO authenticated
USING (true);

CREATE POLICY "Reminders Update Policy"
ON "public"."reminders"
AS PERMISSIVE
FOR UPDATE
TO authenticated
USING (true);

CREATE POLICY "Reminders Delete Policy"
ON "public"."reminders"
AS PERMISSIVE
FOR DELETE
TO authenticated
USING (true);

-- Sales policies
CREATE POLICY "Enable insert for authenticated users only"
ON "public"."sales"
AS PERMISSIVE
FOR INSERT
TO authenticated
WITH CHECK (true);

CREATE POLICY "Enable update for authenticated users only"
ON "public"."sales"
AS PERMISSIVE
FOR UPDATE
TO authenticated
USING (true)
WITH CHECK (true);

CREATE POLICY "Enable read access for authenticated users"
ON "public"."sales"
AS PERMISSIVE
FOR SELECT
TO authenticated
USING (true);

-- Tags policies
CREATE POLICY "Enable insert for authenticated users only"
ON "public"."tags"
AS PERMISSIVE
FOR INSERT
TO authenticated
WITH CHECK (true);

CREATE POLICY "Enable read access for authenticated users"
ON "public"."tags"
AS PERMISSIVE
FOR SELECT
TO authenticated
USING (true);

-- Tasks policies
CREATE POLICY "Enable insert for authenticated users only"
ON "public"."tasks"
AS PERMISSIVE
FOR INSERT
TO authenticated
WITH CHECK (true);

CREATE POLICY "Enable read access for authenticated users"
ON "public"."tasks"
AS PERMISSIVE
FOR SELECT
TO authenticated
USING (true);

CREATE POLICY "Task Update Policy"
ON "public"."tasks"
AS PERMISSIVE
FOR UPDATE
TO authenticated
USING (true);

CREATE POLICY "Task Delete Policy"
ON "public"."tasks"
AS PERMISSIVE
FOR DELETE
TO authenticated
USING (true);

-- ==============================================
-- 8. CREATE STORAGE BUCKET
-- ==============================================

-- Create attachments bucket
INSERT INTO storage.buckets
  (id, name, public)
VALUES
  ('attachments', 'attachments', true);

-- Create storage policies
CREATE POLICY "Attachments 1mt4rzk_0" ON storage.objects FOR SELECT TO authenticated USING (bucket_id = 'attachments');
CREATE POLICY "Attachments 1mt4rzk_1" ON storage.objects FOR INSERT TO authenticated WITH CHECK (bucket_id = 'attachments');
CREATE POLICY "Attachments 1mt4rzk_3" ON storage.objects FOR DELETE TO authenticated USING (bucket_id = 'attachments');

-- ==============================================
-- 9. CREATE FUNCTIONS
-- ==============================================

-- Function to handle new user creation
CREATE FUNCTION public.handle_new_user()
RETURNS trigger
LANGUAGE plpgsql
SECURITY DEFINER SET search_path = ''
AS $$
DECLARE
  sales_count int;
BEGIN
  SELECT count(id) INTO sales_count
  FROM public.sales;

  INSERT INTO public.sales (first_name, last_name, email, user_id, administrator)
  VALUES (
    new.raw_user_meta_data ->> 'first_name', 
    new.raw_user_meta_data ->> 'last_name', 
    new.email, 
    new.id, 
    CASE WHEN sales_count > 0 THEN FALSE ELSE TRUE END
  );
  RETURN new;
END;
$$;

-- Function to handle user updates
CREATE FUNCTION public.handle_update_user()
RETURNS trigger
LANGUAGE plpgsql
SECURITY DEFINER SET search_path = ''
AS $$
BEGIN
  UPDATE public.sales
  SET 
    first_name = new.raw_user_meta_data ->> 'first_name', 
    last_name = new.raw_user_meta_data ->> 'last_name', 
    email = new.email
  WHERE user_id = new.id;

  RETURN new;
END;
$$;

-- ==============================================
-- 10. CREATE TRIGGERS
-- ==============================================

CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE PROCEDURE public.handle_new_user();

CREATE TRIGGER on_auth_user_updated
  AFTER UPDATE ON auth.users
  FOR EACH ROW EXECUTE PROCEDURE public.handle_update_user();

-- ==============================================
-- 11. CREATE VIEWS
-- ==============================================

-- Companies summary view
CREATE VIEW "public"."companies_summary"
    WITH (security_invoker=on)
    AS
SELECT 
    c.*,
    count(distinct d.id) AS nb_deals,
    count(distinct co.id) AS nb_contacts
FROM 
    "public"."companies" c
LEFT JOIN 
    "public"."deals" d ON c.id = d.company_id
LEFT JOIN 
    "public"."contacts" co ON c.id = co.company_id
GROUP BY 
    c.id;

-- Contacts summary view
CREATE VIEW "public"."contacts_summary"
    WITH (security_invoker=on)
    AS
SELECT 
    co.id,
    co.first_name,
    co.last_name,
    co.gender,
    co.title,
    co.email_jsonb,
    jsonb_path_query_array(co.email_jsonb, '$[*].email')::text AS email_fts,
    co.phone_jsonb,
    jsonb_path_query_array(co.phone_jsonb, '$[*].number')::text AS phone_fts,
    co.background,
    co.avatar,
    co.first_seen,
    co.last_seen,
    co.has_newsletter,
    co.status,
    co.tags,
    co.company_id,
    co.sales_id,
    co.linkedin_url,
    c.name AS company_name,
    count(distinct t.id) AS nb_tasks
FROM
    contacts co
LEFT JOIN
    tasks t ON co.id = t.contact_id
LEFT JOIN
    companies c ON co.company_id = c.id
GROUP BY
    co.id, c.name;

-- Init state view
CREATE OR REPLACE VIEW init_state
  WITH (security_invoker=off)
  AS
SELECT count(id) AS is_initialized
FROM (
  SELECT id 
  FROM public.sales
  LIMIT 1
) AS sub;

-- ==============================================
-- 12. INSERT SAMPLE DATA (OPTIONAL)
-- ==============================================

-- Insert some sample tags
INSERT INTO public.tags (name, color) VALUES 
('Hot Lead', '#ef4444'),
('Cold Lead', '#3b82f6'),
('Customer', '#10b981'),
('Prospect', '#f59e0b'),
('VIP', '#8b5cf6');

-- ==============================================
-- SETUP COMPLETE!
-- ==============================================

-- The database is now ready for Pinger Demo
-- You can now:
-- 1. Create your first user account in the application
-- 2. Start adding contacts, companies, deals, and tasks
-- 3. Import sample data from test-data/contacts.csv if needed
